# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.0.{build}

# branches to build
branches:
  only:
    - master

# Build worker image (VM template)
image: Visual Studio 2015

# environment variables
environment:
  PYTHON: Python35
  PYPI_PASSWORD:
    secure: I2X8n7lRmasNOSfkam/LctMp5yw2X3UYmsA46RD6ikI=
  PYPI_USERNAME:
    secure: aOj5+o65rCsGgeSwL7nHjg==

matrix:
  fast_finish: true

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input
  - ps: If ($env:APPVEYOR_REPO_TAG -eq "true" ) { write-output "From a tag build"; $GIT_TAG = (echo $env:APPVEYOR_REPO_TAG_NAME | %{$_ -replace "^patch-[^-]*-", ""});  $env:GIT_ADDITIONAL_FLAGS = "-b $GIT_TAG"; write-output $env:GIT_ADDITIONAL_FLAGS} Else { write-output "Not from a tag build"}
  - ps: If ($env:APPVEYOR_SCHEDULED_BUILD -eq "True" ) { write-output "From a scheduled build" } Else { write-output "Not from a scheduled build"}
  - set PYTHON_EXE=C:\%PYTHON%\python
  - set PIP_EXE=C:\%PYTHON%\Scripts\pip
  - set PYTHON_DIR=C:\%PYTHON%
  - call %PYTHON_EXE% --version
  - call %PIP_EXE% --version

# cache:
  # - C:\ProgramData\chocolatey\bin -> appveyor.yml
  # - C:\ProgramData\chocolatey\lib -> appveyor.yml
  # - C:\deps\opencv-install -> windows/make_opencv.cmd
  # - C:\deps\openblas-install -> windows/make_openblas.cmd

# scripts that run after cloning repository
install:
  - echo "install script"
  - choco install -y pandoc
  - pandoc --version
  - call %PIP_EXE% install pypandoc nose wheel twine numpy matplotlib mxnet
  - SET NOSE_EXE=%PYTHON_DIR%\Scripts\nosetests
  - SET TWINE_EXE=%PYTHON_DIR%\Scripts\twine
  - dir %PYTHON_DIR%\Scripts\
  - call %NOSE_EXE% --version
  - call %TWINE_EXE% --version
  - call .\pypirc.cmd

# real work
build: "off"

# scripts to run before build
before_build:

# scripts to run after build
after_build:

# to run your custom scripts instead of automatic MSBuild
build_script:

# scripts to run before tests
before_test:
  - echo "before build script"
  - cd %APPVEYOR_BUILD_FOLDER%
  - git clone --recursive https://github.com/dmlc/gluon-cv gluon-cv %GIT_ADDITIONAL_FLAGS%
  - SET GLUONCV_DIR=%APPVEYOR_BUILD_FOLDER%\gluon-cv\
  - echo %GLUONCV_DIR%
  - dir %GLUONCV_DIR%
  - xcopy /Y setup.py gluon-cv\setup.py
  - cd .\gluon-cv
  - FOR /F "delims=" %%i IN ('git rev-parse HEAD') DO echo %%i > COMMIT_HASH
  - call %PYTHON_EXE% setup.py sdist
  - call %PYTHON_EXE% setup.py bdist_wheel --universal
  - cd %GLUONCV_DIR%
  - FOR /F "tokens=* USEBACKQ" %%F IN (`dir /b /a-d dist\gluoncv*`) DO (SET wheel_name=%%F)

# to run your custom scripts instead of automatic tests
test_script:
  - cd %GLUONCV_DIR%
  - echo %wheel_name%
  - 7z x "gluon-cv\dist\%wheel_name%" -odebug_wheel
  - dir
  - dir debug_wheel\gluoncv
  - call %PIP_EXE% install -U --force-reinstall "gluon-cv\dist\%wheel_name%"
  - cd %APPVEYOR_BUILD_FOLDER%
  - call %PYTHON_EXE% sanity_test.py

artifacts:
  - path: gluon-cv\dist\*
    name: pypiartifacts

deploy_script:
  - ps: If ($env:APPVEYOR_REPO_TAG -eq "true" -Or $env:APPVEYOR_SCHEDULED_BUILD -eq "True") { Invoke-Expression "$env:TWINE_EXE upload -r pypi --skip-existing gluon-cv/dist/*" } Else { write-output "Not on a tag or scheduled, won't deploy to pypi"}
